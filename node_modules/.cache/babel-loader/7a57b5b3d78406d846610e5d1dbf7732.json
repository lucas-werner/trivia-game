{"ast":null,"code":"import*as types from'./ActionTypes';import GET_TOKEN_API from'../../services/GET_TOKEN_API';var requestToken=function requestToken(){return{type:types.REQUEST_TOKEN};};var tokenSuccess=function tokenSuccess(token){return{type:types.TOKEN_SUCCESS,payload:{token:token}};};var tokenError=function tokenError(error){return{type:types.TOKEN_ERROR,payload:{error:error}};};export default function ActionGetToken(){return function(dispatch){dispatch(requestToken());return GET_TOKEN_API().then(function(data){dispatch(tokenSuccess(data.token));localStorage.setItem('token',data.token);},function(error){return dispatch(tokenError(error.message));});};}","map":{"version":3,"sources":["/home/lucaswerner/repositories/github-personal/trivia-game/src/store/actions/ActionGetToken.js"],"names":["types","GET_TOKEN_API","requestToken","type","REQUEST_TOKEN","tokenSuccess","token","TOKEN_SUCCESS","payload","tokenError","error","TOKEN_ERROR","ActionGetToken","dispatch","then","data","localStorage","setItem","message"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,eAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,8BAA1B,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,SAAO,CAC1BC,IAAI,CAAEH,KAAK,CAACI,aADc,CAAP,EAArB,CAIA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,QAAY,CAC/BH,IAAI,CAAEH,KAAK,CAACO,aADmB,CAE/BC,OAAO,CAAE,CACPF,KAAK,CAALA,KADO,CAFsB,CAAZ,EAArB,CAOA,GAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,QAAY,CAC7BP,IAAI,CAAEH,KAAK,CAACW,WADiB,CAE7BH,OAAO,CAAE,CACPE,KAAK,CAALA,KADO,CAFoB,CAAZ,EAAnB,CAOA,cAAe,SAASE,CAAAA,cAAT,EAA0B,CACvC,MAAO,UAACC,QAAD,CAAc,CACnBA,QAAQ,CAACX,YAAY,EAAb,CAAR,CACA,MAAOD,CAAAA,aAAa,GACjBa,IADI,CACC,SAACC,IAAD,CAAU,CACdF,QAAQ,CAACR,YAAY,CAACU,IAAI,CAACT,KAAN,CAAb,CAAR,CACAU,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8BF,IAAI,CAACT,KAAnC,EACD,CAJI,CAKL,SAACI,KAAD,QAAWG,CAAAA,QAAQ,CAACJ,UAAU,CAACC,KAAK,CAACQ,OAAP,CAAX,CAAnB,EALK,CAAP,CAMD,CARD,CASD","sourcesContent":["import * as types from './ActionTypes';\nimport GET_TOKEN_API from '../../services/GET_TOKEN_API';\n\nconst requestToken = () => ({\n  type: types.REQUEST_TOKEN,\n});\n\nconst tokenSuccess = (token) => ({\n  type: types.TOKEN_SUCCESS,\n  payload: {\n    token,\n  },\n});\n\nconst tokenError = (error) => ({\n  type: types.TOKEN_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport default function ActionGetToken() {\n  return (dispatch) => {\n    dispatch(requestToken());\n    return GET_TOKEN_API()\n      .then((data) => {\n        dispatch(tokenSuccess(data.token));\n        localStorage.setItem('token', data.token);\n      },\n      (error) => dispatch(tokenError(error.message)));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}