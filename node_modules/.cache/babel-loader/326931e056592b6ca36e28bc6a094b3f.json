{"ast":null,"code":"import * as types from './ActionTypes';\nimport GET_TOKEN_API from '../../services/GET_TOKEN_API';\n\nconst requestToken = () => ({\n  type: types.REQUEST_TOKEN\n});\n\nconst tokenSuccess = token => ({\n  type: types.TOKEN_SUCCESS,\n  payload: {\n    token\n  }\n});\n\nconst tokenError = error => ({\n  type: types.TOKEN_ERROR,\n  payload: {\n    error\n  }\n});\n\nexport default function ActionGetToken() {\n  return dispatch => {\n    dispatch(requestToken());\n    return GET_TOKEN_API().then(data => {\n      dispatch(tokenSuccess(data.token));\n      localStorage.setItem('token', data.token);\n    }, error => dispatch(tokenError(error.message)));\n  };\n}","map":{"version":3,"sources":["/home/lucaswerner/repositories/trybe-projects/sd-03-project-trivia-react-redux-02/src/store/actions/ActionGetToken.js"],"names":["types","GET_TOKEN_API","requestToken","type","REQUEST_TOKEN","tokenSuccess","token","TOKEN_SUCCESS","payload","tokenError","error","TOKEN_ERROR","ActionGetToken","dispatch","then","data","localStorage","setItem","message"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;;AAEA,MAAMC,YAAY,GAAG,OAAO;AAC1BC,EAAAA,IAAI,EAAEH,KAAK,CAACI;AADc,CAAP,CAArB;;AAIA,MAAMC,YAAY,GAAIC,KAAD,KAAY;AAC/BH,EAAAA,IAAI,EAAEH,KAAK,CAACO,aADmB;AAE/BC,EAAAA,OAAO,EAAE;AACPF,IAAAA;AADO;AAFsB,CAAZ,CAArB;;AAOA,MAAMG,UAAU,GAAIC,KAAD,KAAY;AAC7BP,EAAAA,IAAI,EAAEH,KAAK,CAACW,WADiB;AAE7BH,EAAAA,OAAO,EAAE;AACPE,IAAAA;AADO;AAFoB,CAAZ,CAAnB;;AAOA,eAAe,SAASE,cAAT,GAA0B;AACvC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACX,YAAY,EAAb,CAAR;AACA,WAAOD,aAAa,GACjBa,IADI,CACEC,IAAD,IAAU;AACdF,MAAAA,QAAQ,CAACR,YAAY,CAACU,IAAI,CAACT,KAAN,CAAb,CAAR;AACAU,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACT,KAAnC;AACD,KAJI,EAKJI,KAAD,IAAWG,QAAQ,CAACJ,UAAU,CAACC,KAAK,CAACQ,OAAP,CAAX,CALd,CAAP;AAMD,GARD;AASD","sourcesContent":["import * as types from './ActionTypes';\nimport GET_TOKEN_API from '../../services/GET_TOKEN_API';\n\nconst requestToken = () => ({\n  type: types.REQUEST_TOKEN,\n});\n\nconst tokenSuccess = (token) => ({\n  type: types.TOKEN_SUCCESS,\n  payload: {\n    token,\n  },\n});\n\nconst tokenError = (error) => ({\n  type: types.TOKEN_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport default function ActionGetToken() {\n  return (dispatch) => {\n    dispatch(requestToken());\n    return GET_TOKEN_API()\n      .then((data) => {\n        dispatch(tokenSuccess(data.token));\n        localStorage.setItem('token', data.token);\n      },\n      (error) => dispatch(tokenError(error.message)));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}