{"ast":null,"code":"var _jsxFileName = \"/home/lucaswerner/repositories/trybe-projects/sd-03-project-trivia-react-redux-02/src/pages/LoginPage/index.js\";\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport SettingsButton from '../../components/SettingsButton';\nimport { ActionSubmitLogin, ActionHandleLogin, ActionGetToken } from '../../store/actions';\nimport GET_GRAVATAR_API from '../../services/GET_GRAVATAR_API';\nimport 'bulma/css/bulma.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  async startGame() {\n    const {\n      SubmitLogin,\n      GetToken,\n      email,\n      name\n    } = this.props;\n    const token = localStorage.getItem('token');\n    const gravatarEmail = await GET_GRAVATAR_API(email);\n    const player = localStorage.getItem('state');\n\n    if (!token) {\n      await GetToken();\n    }\n\n    if (!player) {\n      localStorage.setItem('state', JSON.stringify({\n        player: {\n          name,\n          gravatarEmail\n        }\n      }));\n    }\n\n    SubmitLogin(email);\n  }\n\n  renderInputEmail() {\n    const {\n      email,\n      HandleLogin\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"email\",\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \"Email do Gravatar:\"), /*#__PURE__*/React.createElement(\"input\", {\n      htmlFor: \"email\",\n      name: \"email\",\n      value: email,\n      type: \"email\",\n      \"data-testid\": \"input-gravatar-email\",\n      onChange: e => HandleLogin(e.target),\n      className: \"input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  renderInputName() {\n    const {\n      name,\n      HandleLogin\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"player-name\",\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, \"Nome do Jogador:\"), /*#__PURE__*/React.createElement(\"input\", {\n      htmlFor: \"player-name\",\n      name: \"name\",\n      value: name,\n      type: \"text\",\n      \"data-testid\": \"input-player-name\",\n      onChange: e => HandleLogin(e.target),\n      className: \"input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  renderSubmitButton() {\n    const {\n      email,\n      name\n    } = this.props;\n    const disabled = name !== '' && email !== '';\n    return /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      value: \"Jogar\",\n      \"data-testid\": \"btn-play\",\n      disabled: !disabled,\n      onClick: () => this.startGame(),\n      className: \"button is-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, \"Jogar\");\n  }\n\n  renderInput() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '400px',\n        justifyContent: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SettingsButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, this.renderInputEmail(), this.renderInputName()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, this.renderSubmitButton())));\n  }\n\n  render() {\n    const {\n      logged\n    } = this.props;\n    if (logged) return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 24\n      }\n    });\n    return this.renderInput();\n  }\n\n}\n\nconst mapStateToProps = ({\n  ReducerLogin: {\n    name,\n    email,\n    logged,\n    hash\n  }\n}) => ({\n  name,\n  email,\n  logged,\n  hash\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  HandleLogin: ActionHandleLogin,\n  SubmitLogin: ActionSubmitLogin,\n  GetToken: ActionGetToken\n}, dispatch);\n\nLogin.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  logged: PropTypes.bool.isRequired,\n  HandleLogin: PropTypes.func.isRequired,\n  SubmitLogin: PropTypes.func.isRequired,\n  GetToken: PropTypes.func.isRequired\n};\nLogin.defaultProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/lucaswerner/repositories/trybe-projects/sd-03-project-trivia-react-redux-02/src/pages/LoginPage/index.js"],"names":["React","Redirect","connect","bindActionCreators","PropTypes","SettingsButton","ActionSubmitLogin","ActionHandleLogin","ActionGetToken","GET_GRAVATAR_API","Login","Component","constructor","props","state","startGame","SubmitLogin","GetToken","email","name","token","localStorage","getItem","gravatarEmail","player","setItem","JSON","stringify","renderInputEmail","HandleLogin","e","target","renderInputName","renderSubmitButton","disabled","renderInput","width","justifyContent","render","logged","mapStateToProps","ReducerLogin","hash","mapDispatchToProps","dispatch","propTypes","string","isRequired","bool","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport SettingsButton from '../../components/SettingsButton';\nimport { ActionSubmitLogin, ActionHandleLogin, ActionGetToken } from '../../store/actions';\nimport GET_GRAVATAR_API from '../../services/GET_GRAVATAR_API';\nimport 'bulma/css/bulma.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  async startGame() {\n    const { SubmitLogin, GetToken, email, name } = this.props;\n    const token = localStorage.getItem('token');\n    const gravatarEmail = await GET_GRAVATAR_API(email);\n    const player = localStorage.getItem('state');\n    if (!token) {\n      await GetToken();\n    }\n    if (!player) {\n      localStorage.setItem('state', JSON.stringify({ player: { name, gravatarEmail } }));\n    }\n    SubmitLogin(email);\n  }\n\n  renderInputEmail() {\n    const { email, HandleLogin } = this.props;\n    return (\n      <div className=\"field\">\n        <label htmlFor=\"email\" className=\"label\">Email do Gravatar:</label>\n        <input\n          htmlFor=\"email\"\n          name=\"email\"\n          value={email}\n          type=\"email\"\n          data-testid=\"input-gravatar-email\"\n          onChange={(e) => HandleLogin(e.target)}\n          className=\"input\"\n        />\n      </div>\n    );\n  }\n\n  renderInputName() {\n    const { name, HandleLogin } = this.props;\n    return (\n      <div className=\"field\">\n        <label htmlFor=\"player-name\" className=\"label\">Nome do Jogador:</label>\n        <input\n          htmlFor=\"player-name\"\n          name=\"name\"\n          value={name}\n          type=\"text\"\n          data-testid=\"input-player-name\"\n          onChange={(e) => HandleLogin(e.target)}\n          className=\"input\"\n        />\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    const { email, name } = this.props;\n    const disabled = (name !== '' && email !== '');\n    return (\n      <button\n        type=\"button\"\n        value=\"Jogar\"\n        data-testid=\"btn-play\"\n        disabled={!disabled}\n        onClick={() => this.startGame()}\n        className=\"button is-success\"\n      >\n        Jogar\n      </button>\n\n    );\n  }\n\n  renderInput() {\n    return (\n      <div style={{\n        width: '400px', justifyContent: 'center'\n      }\n      }>\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <SettingsButton />\n          </div>\n          <div className=\"card-content\">\n            {this.renderInputEmail()}\n            {this.renderInputName()}\n          </div>\n          <div>\n            {this.renderSubmitButton()}\n          </div>\n        </div>\n      </div >\n    );\n  }\n\n  render() {\n    const { logged } = this.props;\n    if (logged) return <Redirect to=\"/game\" />;\n\n    return this.renderInput();\n  }\n}\n\n\nconst mapStateToProps = ({\n  ReducerLogin: {\n    name, email, logged, hash,\n  },\n}) => ({\n  name, email, logged, hash,\n});\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\n  {\n    HandleLogin: ActionHandleLogin,\n    SubmitLogin: ActionSubmitLogin,\n    GetToken: ActionGetToken,\n  }, dispatch,\n);\n\nLogin.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  logged: PropTypes.bool.isRequired,\n  HandleLogin: PropTypes.func.isRequired,\n  SubmitLogin: PropTypes.func.isRequired,\n  GetToken: PropTypes.func.isRequired,\n};\n\nLogin.defaultProps = {\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}