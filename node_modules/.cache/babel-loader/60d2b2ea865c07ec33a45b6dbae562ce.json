{"ast":null,"code":"import * as types from './ActionTypes';\nimport GET_QUESTIONS_API from '../../services/GET_QUESTIONS_API';\n\nconst requestQuestions = () => ({\n  type: types.REQUEST_QUESTIONS\n});\n\nconst questionsSuccess = questions => ({\n  type: types.QUESTIONS_SUCCESS,\n  payload: {\n    questions\n  }\n});\n\nconst questionsError = error => ({\n  type: types.QUESTIONS_ERROR,\n  payload: {\n    error\n  }\n});\n\nexport default function ActionGetQuestions(token) {\n  return dispatch => {\n    dispatch(requestQuestions());\n    return GET_QUESTIONS_API(token).then(data => dispatch(questionsSuccess(data.results), console.log('teste', data)), error => dispatch(questionsError(error.message)));\n  };\n}","map":{"version":3,"sources":["/home/lucaswerner/repositories/trybe-projects/sd-03-project-trivia-react-redux-02/src/store/actions/ActionGetQuestions.js"],"names":["types","GET_QUESTIONS_API","requestQuestions","type","REQUEST_QUESTIONS","questionsSuccess","questions","QUESTIONS_SUCCESS","payload","questionsError","error","QUESTIONS_ERROR","ActionGetQuestions","token","dispatch","then","data","results","console","log","message"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;;AAEA,MAAMC,gBAAgB,GAAG,OAAO;AAC9BC,EAAAA,IAAI,EAAEH,KAAK,CAACI;AADkB,CAAP,CAAzB;;AAKA,MAAMC,gBAAgB,GAAIC,SAAD,KAAgB;AACvCH,EAAAA,IAAI,EAAEH,KAAK,CAACO,iBAD2B;AAEvCC,EAAAA,OAAO,EAAE;AACPF,IAAAA;AADO;AAF8B,CAAhB,CAAzB;;AAOA,MAAMG,cAAc,GAAIC,KAAD,KAAY;AACjCP,EAAAA,IAAI,EAAEH,KAAK,CAACW,eADqB;AAEjCH,EAAAA,OAAO,EAAE;AACPE,IAAAA;AADO;AAFwB,CAAZ,CAAvB;;AAOA,eAAe,SAASE,kBAAT,CAA4BC,KAA5B,EAAmC;AAChD,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACZ,gBAAgB,EAAjB,CAAR;AACA,WAAOD,iBAAiB,CAACY,KAAD,CAAjB,CACJE,IADI,CACEC,IAAD,IAAUF,QAAQ,CAACT,gBAAgB,CAACW,IAAI,CAACC,OAAN,CAAjB,EAAiCC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,IAArB,CAAjC,CADnB,EAEFN,KAAD,IAAWI,QAAQ,CAACL,cAAc,CAACC,KAAK,CAACU,OAAP,CAAf,CAFhB,CAAP;AAGD,GALD;AAMD","sourcesContent":["import * as types from './ActionTypes';\nimport GET_QUESTIONS_API from '../../services/GET_QUESTIONS_API';\n\nconst requestQuestions = () => ({\n  type: types.REQUEST_QUESTIONS,\n});\n\n\nconst questionsSuccess = (questions) => ({\n  type: types.QUESTIONS_SUCCESS,\n  payload: {\n    questions,\n  },\n});\n\nconst questionsError = (error) => ({\n  type: types.QUESTIONS_ERROR,\n  payload: {\n    error,\n  },\n});\n\nexport default function ActionGetQuestions(token) {\n  return (dispatch) => {\n    dispatch(requestQuestions());\n    return GET_QUESTIONS_API(token)\n      .then((data) => dispatch(questionsSuccess(data.results), console.log('teste', data)),\n        (error) => dispatch(questionsError(error.message)));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}