"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = PicklistOption;
exports.Option = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _context = require("../Picklist/context");

var _icon = _interopRequireDefault(require("./icon"));

var _header = _interopRequireDefault(require("./styled/header"));

var _headerLabel = _interopRequireDefault(require("./styled/headerLabel"));

var _item = _interopRequireDefault(require("./styled/item"));

var _iconContainer = _interopRequireDefault(require("./styled/iconContainer"));

var _checkmarkIcon = _interopRequireDefault(require("./styled/checkmarkIcon"));

/* eslint-disable no-script-url, react/prop-types, jsx-a11y/anchor-is-valid */
function preventDefault(event) {
  event.preventDefault();
}

var Option =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Option, _Component);

  function Option(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Option);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Option).call(this, props));
    _this.itemRef = _react["default"].createRef();
    _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleHover = _this.handleHover.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(Option, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          variant = _this$props.variant,
          name = _this$props.name;
      var isHeader = variant === 'header';

      if (disabled || isHeader || typeof name !== 'string') {
        return null;
      }

      return this.register();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      return this.unregister();
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      var _this$props2 = this.props,
          disabled = _this$props2.disabled,
          privateOnClick = _this$props2.privateOnClick,
          label = _this$props2.label,
          name = _this$props2.name,
          icon = _this$props2.icon,
          value = _this$props2.value;

      if (disabled) {
        event.preventDefault();
        return null;
      }

      return privateOnClick(event, {
        label: label,
        name: name,
        icon: icon,
        value: value
      });
    }
  }, {
    key: "handleHover",
    value: function handleHover(event) {
      var _this$props3 = this.props,
          privateOnHover = _this$props3.privateOnHover,
          disabled = _this$props3.disabled,
          name = _this$props3.name;

      if (disabled) {
        return null;
      }

      return privateOnHover(event, name);
    }
  }, {
    key: "register",
    value: function register() {
      var _this2 = this;

      var _this$props4 = this.props,
          privateRegisterChild = _this$props4.privateRegisterChild,
          label = _this$props4.label,
          name = _this$props4.name,
          icon = _this$props4.icon,
          value = _this$props4.value;
      return setTimeout(function () {
        return privateRegisterChild(_this2.itemRef.current, {
          label: label,
          name: name,
          icon: icon,
          value: value
        });
      }, 0);
    }
  }, {
    key: "unregister",
    value: function unregister() {
      var privateUnregisterChild = this.props.privateUnregisterChild;

      if (privateUnregisterChild) {
        return privateUnregisterChild(this.itemRef.current);
      }

      return null;
    }
  }, {
    key: "renderRightIcon",
    value: function renderRightIcon() {
      var _this$props5 = this.props,
          name = _this$props5.name,
          currentValueName = _this$props5.currentValueName,
          icon = _this$props5.icon,
          iconPosition = _this$props5.iconPosition;
      var hasRightIcon = !!(icon && iconPosition === 'right');

      if (name === currentValueName) {
        return _react["default"].createElement(_checkmarkIcon["default"], null);
      }

      return _react["default"].createElement(_icon["default"], {
        "data-id": "menu-item-right-icon",
        icon: icon,
        isVisible: hasRightIcon,
        position: iconPosition
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          style = _this$props6.style,
          className = _this$props6.className,
          label = _this$props6.label,
          title = _this$props6.title,
          variant = _this$props6.variant,
          icon = _this$props6.icon,
          iconPosition = _this$props6.iconPosition,
          disabled = _this$props6.disabled,
          activeOptionName = _this$props6.activeOptionName,
          name = _this$props6.name,
          currentValueName = _this$props6.currentValueName;
      var isSelected = currentValueName === name;
      var isActive = activeOptionName === name;

      if (variant === 'header') {
        return _react["default"].createElement(_header["default"], {
          className: className,
          style: style,
          title: title,
          role: "presentation",
          onMouseDown: preventDefault
        }, _react["default"].createElement(_headerLabel["default"], null, label));
      }

      var hasLeftIcon = !!(icon && iconPosition === 'left');
      return _react["default"].createElement("li", {
        "data-selected": isSelected,
        className: className,
        style: style,
        role: "presentation",
        onMouseDown: this.handleClick,
        onMouseEnter: this.handleHover
      }, _react["default"].createElement(_item["default"], {
        id: name,
        role: "option",
        "aria-selected": isActive,
        "aria-disabled": disabled,
        ref: this.itemRef,
        isSelected: isSelected,
        isActive: isActive
      }, _react["default"].createElement(_iconContainer["default"], {
        title: title
      }, _react["default"].createElement(_icon["default"], {
        "data-id": "menu-item-left-icon",
        icon: icon,
        isVisible: hasLeftIcon,
        position: iconPosition
      }), label), this.renderRightIcon()));
    }
  }]);
  return Option;
}(_react.Component);
/**
 * Represents a list options in a menu.
 * @category Form
 */


exports.Option = Option;

function PicklistOption(props) {
  return _react["default"].createElement(_context.Consumer, null, function (values) {
    return _react["default"].createElement(Option, (0, _extends2["default"])({}, props, values));
  });
}

PicklistOption.propTypes = {
  /** Text of the PicklistOption. */
  label: _propTypes["default"].string,

  /** The name of the PicklistOption. */
  name: _propTypes["default"].string,

  /** The variant changes the type of PicklistOption.
   * Accepted variants include default and header.
   * This value defaults to default. */
  variant: _propTypes["default"].oneOf(['default', 'header']),

  /** The icon to show if it is passed. It must be a svg icon or a font icon. */
  icon: _propTypes["default"].node,

  /** Describes the position of the icon with respect to body. Options include left and right.
   * This value defaults to left. */
  iconPosition: _propTypes["default"].oneOf(['left', 'right']),

  /** If true the PicklistOption is not actionable and is shown as disabled. */
  disabled: _propTypes["default"].bool,

  /** Displays tooltip text when the mouse moves over the element. */
  title: _propTypes["default"].string,

  /** The value of the PicklistOption. */
  value: _propTypes["default"].any,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object
};
PicklistOption.defaultProps = {
  label: undefined,
  name: undefined,
  variant: 'default',
  icon: null,
  iconPosition: 'left',
  disabled: false,
  title: undefined,
  className: undefined,
  style: undefined,
  value: undefined
};