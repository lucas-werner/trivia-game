"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireWildcard(require("../"));

describe('Calendar', function () {
  it('should render the component when pass falsy values', function () {
    var values = ['', undefined, null, 0];
    values.forEach(function (value) {
      var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
        value: value
      }));
      expect(component.exists()).toBe(true);
    });
  });
  it('should render the right month', function () {
    var value = new Date('04/24/2019');
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: value
    }));
    expect(component.find('h3[data-id="month"]').text()).toBe('April');
  });
  it('should render the prev month', function () {
    var value = new Date('04/24/2019');
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: value
    }));
    var prevMonthButton = component.find('ButtonIcon').at(0);
    prevMonthButton.simulate('click');
    expect(component.find('h3[data-id="month"]').text()).toBe('March');
  });
  it('should render the next month', function () {
    var value = new Date('04/24/2019');
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: value
    }));
    var nextMonthButton = component.find('ButtonIcon').at(1);
    nextMonthButton.simulate('click');
    expect(component.find('h3[data-id="month"]').text()).toBe('May');
  });
  it('should set to disable the prev month button when minDate is greater than prev month date', function () {
    var value = new Date('04/24/2019');
    var minDate = new Date('04/01/2019');
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: value,
      minDate: minDate
    }));
    var prevMonthButton = component.find('ButtonIcon').at(0);
    expect(prevMonthButton.prop('disabled')).toBe(true);
  });
  it('should set to disable the next month button when maxDate is less than next month date', function () {
    var value = new Date('04/24/2019');
    var maxDate = new Date('04/30/2019');
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: value,
      maxDate: maxDate
    }));
    var prevMonthButton = component.find('ButtonIcon').at(1);
    expect(prevMonthButton.prop('disabled')).toBe(true);
  });
  it('should render the right month when value is updated', function () {
    var value = new Date('04/24/2019');
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: value
    }));
    component.setProps({
      value: new Date('10/24/2019')
    });
    expect(component.find('h3[data-id="month"]').text()).toBe('October');
  });
  it('should change the year', function () {
    var value = new Date('04/24/2019');
    var component = (0, _enzyme.mount)(_react["default"].createElement(_["default"], {
      value: value
    }));
    var select = component.find('Select');
    expect(select.prop('value')).toBe(2019);
    component.find('select').simulate('change', {
      target: {
        value: 2022
      }
    });
    expect(component.find('Select').prop('value')).toBe(2022);
  });
  it('should set the right attributes in table element', function () {
    var value = new Date('04/24/2019');
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      value: value
    }));
    var monthLabelId = component.instance().monthLabelId;
    expect(component.find('table').props()).toEqual(expect.objectContaining({
      'aria-labelledby': monthLabelId,
      role: 'grid'
    }));
  });
});