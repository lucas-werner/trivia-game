"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _constants = require("../../../libs/constants");

var _ = require("../");

var _PicklistOption = _interopRequireDefault(require("../../PicklistOption"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

jest.useFakeTimers();
describe('<Picklist />', function () {
  var menuRef = {
    clientHeight: 225,
    scrollTop: 0,
    scrollHeight: 285,
    scrollTo: jest.fn(function () {})
  };
  it('should set the value label as value in the input element', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist",
      value: {
        label: 'Option 1'
      }
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    })));
    expect(component.find('input').prop('value')).toBe('Option 1');
  });
  it('should have the right number of children registered when mounted', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist"
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    }), _react["default"].createElement(_PicklistOption["default"], {
      disabled: true,
      label: "Option 2",
      name: "option2"
    }), _react["default"].createElement(_PicklistOption["default"], {
      variant: "header",
      label: "Header 3"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 3",
      name: "option3"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 4",
      name: "option4"
    })));
    jest.runAllTimers();
    expect(component.instance().activeChildren.length).toBe(3);
  });
  it('should open menu when click the picklist input', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist"
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 2",
      name: "option2"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 3",
      name: "option3"
    })));
    expect(component.find('[aria-expanded=true]').exists()).toBe(false);
    component.instance().menuRef.current = menuRef;
    component.find('input').simulate('click');
    expect(component.find('[aria-expanded=true]').exists()).toBe(true);
  });
  it('should open menu when picklist is focused and press a navigation key', function () {
    var keyCodes = [_constants.UP_KEY, _constants.LEFT_KEY, _constants.RIGHT_KEY, _constants.DOWN_KEY];
    keyCodes.forEach(function (keyCode) {
      var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
        label: "Picklist"
      }, _react["default"].createElement(_PicklistOption["default"], {
        label: "Option 1",
        name: "option1"
      }), _react["default"].createElement(_PicklistOption["default"], {
        label: "Option 2",
        name: "option2"
      }), _react["default"].createElement(_PicklistOption["default"], {
        label: "Option 3",
        name: "option3"
      })));
      var input = component.find('input');
      input.simulate('focus');
      expect(component.find('[aria-expanded=true]').exists()).toBe(false);
      component.instance().menuRef.current = menuRef;
      input.simulate('keyDown', {
        keyCode: keyCode
      });
      expect(component.find('[aria-expanded=true]').exists()).toBe(true);
    });
  });
  it('should open menu when picklist is focused and press SPACE key', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist"
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 2",
      name: "option2"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 3",
      name: "option3"
    })));
    var input = component.find('input');
    input.simulate('focus');
    expect(component.find('[aria-expanded=true]').exists()).toBe(false);
    component.instance().menuRef.current = menuRef;
    input.simulate('keyDown', {
      keyCode: _constants.SPACE_KEY
    });
    expect(component.find('[aria-expanded=true]').exists()).toBe(true);
  });
  it('should close menu when is opened and click the picklist input', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist"
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 2",
      name: "option2"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 3",
      name: "option3"
    })));
    component.instance().menuRef.current = menuRef;
    component.instance().openMenu();
    component.update();
    expect(component.find('[aria-expanded=true]').exists()).toBe(true);
    component.find('input').simulate('click');
    expect(component.find('[aria-expanded=true]').exists()).toBe(false);
  });
  it('should close menu when is opened and press ESCAPE key', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist"
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 2",
      name: "option2"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 3",
      name: "option3"
    })));
    component.instance().menuRef.current = menuRef;
    component.instance().openMenu();
    component.update();
    expect(component.find('[aria-expanded=true]').exists()).toBe(true);
    component.find('input').simulate('keyDown', {
      keyCode: _constants.ESCAPE_KEY
    });
    expect(component.find('[aria-expanded=true]').exists()).toBe(false);
  });
  it('should close menu when is opened and press TAB key', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist"
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 2",
      name: "option2"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 3",
      name: "option3"
    })));
    component.instance().menuRef.current = menuRef;
    component.instance().openMenu();
    component.update();
    expect(component.find('[aria-expanded=true]').exists()).toBe(true);
    component.find('input').simulate('keyDown', {
      keyCode: _constants.TAB_KEY
    });
    expect(component.find('[aria-expanded=true]').exists()).toBe(false);
  });
  it('should fire onChange when option is selected by click', function () {
    var onChangeFn = jest.fn();
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist",
      onChange: onChangeFn
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 2",
      name: "option2"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 3",
      name: "option3"
    })));
    component.instance().menuRef.current = menuRef;
    component.instance().openMenu();
    component.update();
    component.find('li').at(1).simulate('mousedown');
    expect(onChangeFn).toHaveBeenCalledWith({
      label: 'Option 2',
      name: 'option2',
      icon: null,
      value: undefined
    });
  });
  it('should fire onChange when option is selected by pressing ENTER key', function () {
    var onChangeFn = jest.fn();
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist",
      onChange: onChangeFn
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 2",
      name: "option2"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 3",
      name: "option3"
    })));
    jest.runAllTimers();
    component.instance().menuRef.current = menuRef;
    component.instance().openMenu();
    component.update();
    component.find('li').at(1).simulate('keyDown', {
      keyCode: _constants.ENTER_KEY
    });
    expect(onChangeFn).toHaveBeenCalledWith({
      label: 'Option 1',
      name: 'option1',
      icon: null,
      value: undefined
    });
  });
  it('should render scroll down arrow when number of children is more than five', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist"
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 2",
      name: "option2"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 3",
      name: "option3"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 4",
      name: "option4"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 5",
      name: "option5"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 6",
      name: "option6"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 7",
      name: "option7"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 8",
      name: "option8"
    })));
    component.instance().menuRef.current = _objectSpread({}, menuRef, {
      scrollHeight: 360
    });
    component.instance().openMenu();
    component.update();
    expect(component.find("MenuArrowButton[arrow='down']").exists()).toBe(true);
  });
  it('should not render scroll down arrow when number of children is less than five', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist"
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 2",
      name: "option2"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 3",
      name: "option3"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 4",
      name: "option4"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 5",
      name: "option5"
    })));
    component.instance().menuRef.current = _objectSpread({}, menuRef, {
      clientHeight: 200,
      scrollHeight: 200
    });
    component.instance().openMenu();
    component.update();
    expect(component.find("MenuArrowButton[arrow='down']").exists()).toBe(false);
  });
  it('should not render scroll up arrow when popup menu scroll position is zero', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist"
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 2",
      name: "option2"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 3",
      name: "option3"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 4",
      name: "option4"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 5",
      name: "option5"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 6",
      name: "option6"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 7",
      name: "option7"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 8",
      name: "option8"
    })));
    component.instance().menuRef.current = _objectSpread({}, menuRef, {
      clientHeight: 230,
      scrollHeight: 320
    });
    component.instance().openMenu();
    component.update();
    expect(component.find("MenuArrowButton[arrow='up']").exists()).toBe(false);
  });
  it('should render scroll up arrow when popup menu scroll position is greater than zero', function () {
    var component = (0, _enzyme.mount)(_react["default"].createElement(_.Component, {
      label: "Picklist"
    }, _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 1",
      name: "option1"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 2",
      name: "option2"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 3",
      name: "option3"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 4",
      name: "option4"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 5",
      name: "option5"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 6",
      name: "option6"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 7",
      name: "option7"
    }), _react["default"].createElement(_PicklistOption["default"], {
      label: "Option 8",
      name: "option8"
    })));
    component.instance().menuRef.current = _objectSpread({}, menuRef, {
      scrollTop: 80,
      clientHeight: 230,
      scrollHeight: 320
    });
    component.instance().openMenu();
    component.update();
    expect(component.find("MenuArrowButton[arrow='up']").exists()).toBe(true);
  });
});