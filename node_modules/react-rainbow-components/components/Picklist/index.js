"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = exports["default"] = void 0;

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _withReduxForm = _interopRequireDefault(require("../../libs/hocs/withReduxForm"));

var _RenderIf = _interopRequireDefault(require("../RenderIf"));

var _constants = require("../../libs/constants");

var _context = require("./context");

var _menuContent = _interopRequireDefault(require("./menuContent"));

var _utils = require("./utils");

var _utils2 = require("../../libs/utils");

var _label = _interopRequireDefault(require("../Input/label"));

var _menuArrowButton = _interopRequireDefault(require("./menuArrowButton"));

var _getNormalizeValue3 = _interopRequireDefault(require("./helpers/getNormalizeValue"));

var _getSelectedOptionName = _interopRequireDefault(require("./helpers/getSelectedOptionName"));

var _isChildRegistered = _interopRequireDefault(require("./helpers/isChildRegistered"));

var _isOptionVisible = _interopRequireDefault(require("./helpers/isOptionVisible"));

var _shouldOpenMenu = _interopRequireDefault(require("./helpers/shouldOpenMenu"));

var _calculateScrollOffset = _interopRequireDefault(require("./helpers/calculateScrollOffset"));

var _isScrollPositionAtMenuBottom = _interopRequireDefault(require("./helpers/isScrollPositionAtMenuBottom"));

var _input = _interopRequireDefault(require("./styled/input"));

var _container = _interopRequireDefault(require("./styled/container"));

var _innerContainer = _interopRequireDefault(require("./styled/innerContainer"));

var _icon = _interopRequireDefault(require("./styled/icon"));

var _errorText = _interopRequireDefault(require("../Input/styled/errorText"));

var _indicator = _interopRequireDefault(require("./styled/indicator"));

var _dropdown = _interopRequireDefault(require("./styled/dropdown"));

var _ul = _interopRequireDefault(require("./styled/ul"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var sizeMap = {
  medium: 227
};
/**
 * A Picklist provides a user with an read-only input field that is accompanied with
 *  a listbox of pre-defined options.
 * @category Form
 */

var Picklist =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(Picklist, _Component);

  function Picklist(props) {
    var _this$keyHandlerMap;

    var _this;

    (0, _classCallCheck2["default"])(this, Picklist);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Picklist).call(this, props));
    _this.inputId = (0, _utils2.uniqueId)('picklist-input');
    _this.errorMessageId = (0, _utils2.uniqueId)('error-message');
    _this.listboxId = (0, _utils2.uniqueId)('listbox');
    _this.containerRef = _react["default"].createRef();
    _this.triggerRef = _react["default"].createRef();
    _this.menuRef = _react["default"].createRef();
    _this.handleInputClick = _this.handleInputClick.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleFocus = _this.handleFocus.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleBlur = _this.handleBlur.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleKeyPressed = _this.handleKeyPressed.bind((0, _assertThisInitialized2["default"])(_this));
    _this.hoverChild = _this.hoverChild.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleOptionClick = _this.handleOptionClick.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleScrollUpArrowHover = _this.handleScrollUpArrowHover.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleScrollDownArrowHover = _this.handleScrollDownArrowHover.bind((0, _assertThisInitialized2["default"])(_this));
    _this.updateScrollingArrows = _this.updateScrollingArrows.bind((0, _assertThisInitialized2["default"])(_this));
    _this.stopArrowScoll = _this.stopArrowScoll.bind((0, _assertThisInitialized2["default"])(_this));
    _this.registerChild = _this.registerChild.bind((0, _assertThisInitialized2["default"])(_this));
    _this.unregisterChild = _this.unregisterChild.bind((0, _assertThisInitialized2["default"])(_this));
    _this.activeChildren = [];
    _this.state = {
      isOpen: false,
      activeOptionIndex: -1,
      activeOptionName: null,
      showScrollUpArrow: undefined,
      showScrollDownArrow: undefined
    };
    _this.keyHandlerMap = (_this$keyHandlerMap = {}, (0, _defineProperty2["default"])(_this$keyHandlerMap, _constants.UP_KEY, _this.handleKeyUpPressed.bind((0, _assertThisInitialized2["default"])(_this))), (0, _defineProperty2["default"])(_this$keyHandlerMap, _constants.DOWN_KEY, _this.handleKeyDownPressed.bind((0, _assertThisInitialized2["default"])(_this))), (0, _defineProperty2["default"])(_this$keyHandlerMap, _constants.ESCAPE_KEY, _this.closeMenu.bind((0, _assertThisInitialized2["default"])(_this))), (0, _defineProperty2["default"])(_this$keyHandlerMap, _constants.TAB_KEY, _this.closeMenu.bind((0, _assertThisInitialized2["default"])(_this))), (0, _defineProperty2["default"])(_this$keyHandlerMap, _constants.ENTER_KEY, _this.handleKeyEnterPressed.bind((0, _assertThisInitialized2["default"])(_this))), _this$keyHandlerMap);
    return _this;
  }

  (0, _createClass2["default"])(Picklist, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var wasOpen = prevState.isOpen;
      var isOpen = this.state.isOpen;

      if (!wasOpen && isOpen) {
        this.scrollTo(0);
        this.updateScrollingArrows();
      }
    }
  }, {
    key: "getContext",
    value: function getContext() {
      var activeOptionName = this.state.activeOptionName;
      var value = this.props.value;

      var _getNormalizeValue = (0, _getNormalizeValue3["default"])(value),
          name = _getNormalizeValue.name;

      return {
        privateOnClick: this.handleOptionClick,
        privateRegisterChild: this.registerChild,
        privateUnregisterChild: this.unregisterChild,
        privateOnHover: this.hoverChild,
        activeOptionName: activeOptionName,
        currentValueName: name
      };
    } // eslint-disable-next-line class-methods-use-this

  }, {
    key: "getMenuMaxHeight",
    value: function getMenuMaxHeight() {
      return sizeMap.medium;
    }
  }, {
    key: "getErrorMessageId",
    value: function getErrorMessageId() {
      var error = this.props.error;

      if (error) {
        return this.errorMessageId;
      }

      return undefined;
    }
  }, {
    key: "getAriaActivedescendant",
    value: function getAriaActivedescendant() {
      var activeOptionName = this.state.activeOptionName;
      var value = this.props.value;
      return activeOptionName || (0, _getSelectedOptionName["default"])(value);
    }
  }, {
    key: "handleKeyUpPressed",
    value: function handleKeyUpPressed() {
      var activeOptionIndex = this.state.activeOptionIndex;
      var nextActiveIndex = (this.activeChildren.length + activeOptionIndex - 1) % this.activeChildren.length;

      if (nextActiveIndex < activeOptionIndex) {
        if (nextActiveIndex === 0) {
          this.scrollTo(0);
        } else {
          this.scrollToOption(nextActiveIndex);
        }

        this.setState({
          activeOptionIndex: nextActiveIndex,
          activeOptionName: this.activeChildren[nextActiveIndex].name
        });
      }
    }
  }, {
    key: "handleKeyDownPressed",
    value: function handleKeyDownPressed() {
      var activeOptionIndex = this.state.activeOptionIndex;
      var nextActiveIndex = (activeOptionIndex + 1) % this.activeChildren.length;

      if (nextActiveIndex > 0) {
        this.scrollToOption(nextActiveIndex);
        this.setState({
          activeOptionIndex: nextActiveIndex,
          activeOptionName: this.activeChildren[nextActiveIndex].name
        });
      }
    }
  }, {
    key: "handleKeyEnterPressed",
    value: function handleKeyEnterPressed() {
      var onChange = this.props.onChange;
      var activeOptionIndex = this.state.activeOptionIndex;
      var _this$activeChildren$ = this.activeChildren[activeOptionIndex],
          label = _this$activeChildren$.label,
          name = _this$activeChildren$.name,
          icon = _this$activeChildren$.icon,
          value = _this$activeChildren$.value;
      this.closeMenu();
      return onChange({
        label: label,
        name: name,
        icon: icon,
        value: value
      });
    }
  }, {
    key: "handleKeyPressed",
    value: function handleKeyPressed(event) {
      var isOpen = this.state.isOpen;

      if (isOpen) {
        if ([_constants.UP_KEY, _constants.DOWN_KEY, _constants.SPACE_KEY].includes(event.keyCode)) event.preventDefault();

        if (this.keyHandlerMap[event.keyCode]) {
          return this.keyHandlerMap[event.keyCode]();
        }
      } else if ((0, _shouldOpenMenu["default"])(event.keyCode)) {
        event.preventDefault();
        this.openMenu();
      }

      return null;
    }
  }, {
    key: "registerChild",
    value: function registerChild(childRef, childProps) {
      if ((0, _isChildRegistered["default"])(childRef, this.activeChildren)) return;

      var _getChildMenuItemNode = (0, _utils.getChildMenuItemNodes)(this.containerRef.current),
          _getChildMenuItemNode2 = (0, _toArray2["default"])(_getChildMenuItemNode),
          nodes = _getChildMenuItemNode2.slice(0);

      this.activeChildren = (0, _utils.insertChildOrderly)(this.activeChildren, _objectSpread({
        ref: childRef
      }, childProps), nodes);
    }
  }, {
    key: "unregisterChild",
    value: function unregisterChild(childRef) {
      if (!(0, _isChildRegistered["default"])(childRef, this.activeChildren)) return;
      this.activeChildren = this.activeChildren.filter(function (child) {
        return child.ref !== childRef;
      });
    }
  }, {
    key: "hoverChild",
    value: function hoverChild(event, name) {
      this.setState({
        activeOptionName: name,
        activeOptionIndex: this.activeChildren.findIndex(function (child) {
          return child.name === name;
        })
      });
    }
  }, {
    key: "openMenu",
    value: function openMenu() {
      var firstOptionIndex = this.activeChildren.length > 0 ? 0 : -1;
      var firstOptionName = this.activeChildren.length > 0 ? this.activeChildren[0].name : null;
      return this.setState({
        isOpen: true,
        activeOptionIndex: firstOptionIndex,
        activeOptionName: firstOptionName
      });
    }
  }, {
    key: "closeMenu",
    value: function closeMenu() {
      return this.setState({
        isOpen: false,
        activeOptionIndex: -1,
        activeOptionName: null
      });
    }
  }, {
    key: "handleInputClick",
    value: function handleInputClick(event) {
      var onClick = this.props.onClick;
      var isOpen = this.state.isOpen;
      onClick(event);

      if (isOpen) {
        return this.closeMenu();
      }

      return this.openMenu();
    }
  }, {
    key: "handleFocus",
    value: function handleFocus() {
      var _this$props = this.props,
          onFocus = _this$props.onFocus,
          value = _this$props.value;
      var eventValue = value || null;
      onFocus(eventValue);
    }
  }, {
    key: "handleBlur",
    value: function handleBlur() {
      var _this$props2 = this.props,
          onBlur = _this$props2.onBlur,
          value = _this$props2.value;
      this.closeMenu();
      var eventValue = value || null;
      onBlur(eventValue);
    }
  }, {
    key: "handleOptionClick",
    value: function handleOptionClick(event, option) {
      var onChange = this.props.onChange;
      return onChange(option);
    }
  }, {
    key: "scrollToOption",
    value: function scrollToOption(nextFocusedIndex) {
      var activeOptionIndex = this.state.activeOptionIndex;
      var currentFocusedOptionRef = this.activeChildren[activeOptionIndex].ref;
      var nextFocusedOptionRef = this.activeChildren[nextFocusedIndex].ref;

      if (!(0, _isOptionVisible["default"])(nextFocusedOptionRef, this.menuRef.current)) {
        var amount = (0, _calculateScrollOffset["default"])(currentFocusedOptionRef.offsetTop, nextFocusedOptionRef.offsetTop);
        this.scrollBy(amount);
      }
    }
  }, {
    key: "scrollTo",
    value: function scrollTo(offset) {
      this.menuRef.current.scrollTo(0, offset);
    }
  }, {
    key: "scrollBy",
    value: function scrollBy(offset) {
      this.menuRef.current.scrollBy(0, offset);
    }
  }, {
    key: "updateScrollingArrows",
    value: function updateScrollingArrows() {
      var menu = this.menuRef.current;
      var showScrollUpArrow = menu.scrollTop > 0;
      var showScrollDownArrow = !(0, _isScrollPositionAtMenuBottom["default"])(menu);
      this.setState({
        showScrollUpArrow: showScrollUpArrow,
        showScrollDownArrow: showScrollDownArrow
      });
    }
  }, {
    key: "handleScrollUpArrowHover",
    value: function handleScrollUpArrowHover() {
      var _this2 = this;

      this.stopArrowScoll();
      var menu = this.menuRef.current;
      this.scrollingTimer = setInterval(function () {
        if (menu.scrollTop > 0) {
          menu.scrollBy(0, -1);
        } else {
          _this2.stopArrowScoll();
        }
      }, 5);
    }
  }, {
    key: "handleScrollDownArrowHover",
    value: function handleScrollDownArrowHover() {
      var _this3 = this;

      this.stopArrowScoll();
      var menu = this.menuRef.current;
      this.scrollingTimer = setInterval(function () {
        if (!(0, _isScrollPositionAtMenuBottom["default"])(menu)) {
          menu.scrollBy(0, 1);
        } else {
          _this3.stopArrowScoll();
        }
      }, 5);
    }
  }, {
    key: "stopArrowScoll",
    value: function stopArrowScoll() {
      if (this.scrollingTimer) clearInterval(this.scrollingTimer);
    }
    /**
     * Sets focus on the element.
     * @public
     */

  }, {
    key: "focus",
    value: function focus() {
      this.triggerRef.current.focus();
    }
    /**
     * Sets click on the element.
     * @public
     */

  }, {
    key: "click",
    value: function click() {
      this.triggerRef.current.click();
    }
    /**
     * Sets blur on the element.
     * @public
     */

  }, {
    key: "blur",
    value: function blur() {
      this.triggerRef.current.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          pickListLabel = _this$props3.label,
          hideLabel = _this$props3.hideLabel,
          style = _this$props3.style,
          className = _this$props3.className,
          error = _this$props3.error,
          isLoading = _this$props3.isLoading,
          disabled = _this$props3.disabled,
          readOnly = _this$props3.readOnly,
          required = _this$props3.required,
          children = _this$props3.children,
          id = _this$props3.id,
          tabIndex = _this$props3.tabIndex,
          placeholder = _this$props3.placeholder,
          name = _this$props3.name,
          valueInProps = _this$props3.value;

      var _getNormalizeValue2 = (0, _getNormalizeValue3["default"])(valueInProps),
          valueLabel = _getNormalizeValue2.label,
          icon = _getNormalizeValue2.icon;

      var value = valueLabel || '';
      var errorMessageId = this.getErrorMessageId();
      var menuContainerStyles = {
        maxHeight: this.getMenuMaxHeight()
      };
      var _this$state = this.state,
          showScrollUpArrow = _this$state.showScrollUpArrow,
          showScrollDownArrow = _this$state.showScrollDownArrow,
          isOpen = _this$state.isOpen;
      return _react["default"].createElement(_container["default"], {
        id: id,
        role: "presentation",
        className: className,
        style: style,
        onKeyDown: this.handleKeyPressed,
        ref: this.containerRef,
        readOnly: readOnly
      }, _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!pickListLabel
      }, _react["default"].createElement(_label["default"], {
        label: pickListLabel,
        hideLabel: hideLabel,
        required: required,
        inputId: this.inputId,
        readOnly: readOnly
      })), _react["default"].createElement(_innerContainer["default"], {
        "aria-expanded": isOpen,
        "aria-haspopup": "listbox" // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
        ,
        role: "combobox"
      }, _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!icon
      }, _react["default"].createElement(_icon["default"], {
        error: error
      }, icon)), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !readOnly
      }, _react["default"].createElement(_indicator["default"], {
        error: error,
        disabled: disabled
      })), _react["default"].createElement(_input["default"], {
        "aria-controls": this.listboxId,
        id: this.inputId,
        type: "text",
        name: name,
        value: value,
        error: error,
        onClick: this.handleInputClick,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        placeholder: placeholder,
        tabIndex: tabIndex,
        readOnly: true,
        isReadOnly: readOnly,
        disabled: disabled,
        required: required,
        "aria-describedby": errorMessageId,
        autoComplete: "off",
        ref: this.triggerRef,
        "aria-activedescendant": this.getAriaActivedescendant(),
        icon: icon,
        iconPosition: "left"
      }), _react["default"].createElement(_dropdown["default"], {
        id: this.listboxId,
        role: "listbox",
        isVisible: isOpen && !readOnly,
        isLoading: isLoading
      }, _react["default"].createElement(_RenderIf["default"], {
        isTrue: showScrollUpArrow
      }, _react["default"].createElement(_menuArrowButton["default"], {
        arrow: "up",
        onMouseEnter: this.handleScrollUpArrowHover,
        onMouseLeave: this.stopArrowScoll
      })), _react["default"].createElement(_ul["default"], {
        role: "presentation",
        onScroll: this.updateScrollingArrows,
        ref: this.menuRef,
        style: menuContainerStyles
      }, _react["default"].createElement(_menuContent["default"], {
        isLoading: isLoading
      }, _react["default"].createElement(_context.Provider, {
        value: this.getContext()
      }, children))), _react["default"].createElement(_RenderIf["default"], {
        isTrue: showScrollDownArrow
      }, _react["default"].createElement(_menuArrowButton["default"], {
        arrow: "down",
        onMouseEnter: this.handleScrollDownArrowHover,
        onMouseLeave: this.stopArrowScoll
      })))), _react["default"].createElement(_RenderIf["default"], {
        isTrue: !!error
      }, _react["default"].createElement(_errorText["default"], {
        id: errorMessageId
      }, error)));
    }
  }]);
  return Picklist;
}(_react.Component);

exports.Component = Picklist;
Picklist.propTypes = {
  /** Text label for the PickList. */
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** A boolean to hide the PickList label. */
  hideLabel: _propTypes["default"].bool,

  /** The content of the Picklist. Used to render the options
   * when the Picklist is open. */
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].node), _propTypes["default"].object]),

  /** If is set to true, then is showed a loading symbol. */
  isLoading: _propTypes["default"].bool,

  /** Specifies the selected value of the Picklist. */
  value: _propTypes["default"].oneOfType([_propTypes["default"].shape({
    label: _propTypes["default"].string,
    name: _propTypes["default"].string,
    icon: _propTypes["default"].node,
    value: _propTypes["default"].any
  }), _propTypes["default"].string]),

  /**  The action triggered when click/select an option. */
  onChange: _propTypes["default"].func,

  /** The action triggered when the element is clicked. */
  onClick: _propTypes["default"].func,

  /** The action triggered when the element receives focus. */
  onFocus: _propTypes["default"].func,

  /** The action triggered when the element releases focus. */
  onBlur: _propTypes["default"].func,

  /** Specifies the tab order of an element (when the tab button is used for navigating). */
  tabIndex: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */
  placeholder: _propTypes["default"].string,

  /** The name of the Picklist. */
  name: _propTypes["default"].string,

  /** Specifies that the Picklist must be filled out before submitting the form. */
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** Specifies that an option must be selected before submitting the form.
   * This value defaults to false. */
  required: _propTypes["default"].bool,

  /** Specifies that the Picklist element should be disabled. This value defaults to false. */
  disabled: _propTypes["default"].bool,

  /** Specifies that the Picklist is read-only. This value defaults to false. */
  readOnly: _propTypes["default"].bool,

  /** The id of the outer element. */
  id: _propTypes["default"].string,

  /** A CSS class for the outer element, in addition to the component's base classes. */
  className: _propTypes["default"].string,

  /** An object with custom style applied to the outer element. */
  style: _propTypes["default"].object
};
Picklist.defaultProps = {
  label: undefined,
  children: null,
  isLoading: false,
  value: undefined,
  onChange: function onChange() {},
  onClick: function onClick() {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  tabIndex: undefined,
  placeholder: undefined,
  name: undefined,
  hideLabel: false,
  id: undefined,
  error: null,
  disabled: false,
  readOnly: false,
  required: false,
  className: undefined,
  style: undefined
};

var _default = (0, _withReduxForm["default"])(Picklist);

exports["default"] = _default;